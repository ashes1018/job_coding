package com.leetcode;

import java.util.Stack;

public class longest_valid_parentheses {
	
//	brute way.
//	维护一个栈，遇到"("，则加入进栈；若是")"，则对栈进行判空操作，若非空且为"("，则是符合的一对；
	public boolean isValid(String s){
		Stack<Character> stack = new Stack<>();
		for (int i = 0; i < s.length(); i++) {
			if(s.charAt(i) == '('){
				stack.push('(');
			}else if(!stack.isEmpty() && stack.peek() == '('){
				stack.pop();
			}else {
				return false;
			}
		}
		return stack.isEmpty();
	}
	
//	遍历待判断序列，暴力遍历
	public int longestParentheses(String s) {
		int maxlen = 0;
		for (int i = 0; i < s.length(); i++) {
			for(int j = i+2; j <= s.length(); j+= 2){
				if(isValid(s.substring(i,j))){
					maxlen = Math.max(maxlen, j-i);
				}
			}
		}
		return maxlen;
	}
	
//	动态规划方法。维护一个dp数组，用以表示最长的有效子串。分两种情况，第一种为()()这种情况，第二种为((()))这样的，分类讨论。
	public int longestParentheses2(String s) {
		int maxlen = 0;
		int[] dp = new int[s.length()];
		for (int i = 1; i < s.length(); i++) {
			if(s.charAt(i) == ')'){
				if(s.charAt(i-1) =='('){
					dp[i] = (i >= 2? dp[i-2]:0) + 2;					
				}else if((i- dp[i-1]) > 0 && s.charAt(i-dp[i-1]-1) == '('){
					dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
						}
					}							
			maxlen = Math.max(maxlen, dp[i]);
		}
		return maxlen;
	}
	
//	栈方法。
	public int longestParentheses3(String s) {
		int maxlen = 0;
		Stack<Integer> stack = new Stack<>();
		for (int i = 0; i < s.length(); i++) {
			if(s.charAt(i) == '('){
				stack.push(i);
			}else{
				stack.pop();
				if(stack.isEmpty()){
					stack.push(i);
				}else {
					maxlen = Math.max(maxlen, i-stack.peek());
				}
			}
		}
		return maxlen;
	}
	
	
	
	
	
	public static void main(String[] args) {
		String s = "())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(()))((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))())())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())(";
//		String s = ")()()";
		System.out.println(new longest_valid_parentheses().longestParentheses(s));
		System.out.println(new longest_valid_parentheses().longestParentheses2(s));
		System.out.println(new longest_valid_parentheses().longestParentheses3(s));
	}
}
